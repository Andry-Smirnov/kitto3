/********************* ROLES **********************/

/********************* UDFS ***********************/

/****************** SEQUENCES ********************/

/******************** DOMAINS *********************/

/******************* PROCEDURES ******************/

/******************** TABLES **********************/

CREATE TABLE ACTIVITY
(
  ACTIVITY_ID varchar(32) NOT NULL,
  DESCRIPTION varchar(80) NOT NULL,
  PHASE_ID varchar(32) NOT NULL,
  EMPLOYEE_ID varchar(32) NOT NULL,
  ROLE_ID varchar(32) NOT NULL,
  TYPE_ID varchar(32) NOT NULL,
  ACTIVITY_DATE date NOT NULL,
  START_TIME time,
  END_TIME time,
  STATUS varchar(12),
  CONSTRAINT PK_ACTIVITY PRIMARY KEY (ACTIVITY_ID)
);
CREATE TABLE ACTIVITY_TYPE
(
  TYPE_ID varchar(32) NOT NULL,
  TYPE_NAME varchar(20) NOT NULL,
  CONSTRAINT PK_ACTIVITY_TYPE PRIMARY KEY (TYPE_ID)
);
CREATE TABLE CUSTOMER
(
  CUSTOMER_ID varchar(32) NOT NULL,
  CUSTOMER_NAME varchar(40) NOT NULL,
  ADDRESS varchar(60),
  CITY varchar(60),
  PHONE varchar(20),
  EMAIL varchar(60),
  STATUS varchar(10),
  CONSTRAINT PK_CUSTOMER PRIMARY KEY (CUSTOMER_ID)
);
CREATE TABLE EMPLOYEE
(
  EMPLOYEE_ID varchar(32) NOT NULL,
  EMPLOYEE_NAME varchar(40) NOT NULL,
  EMPLOYEE_TYPE varchar(20),
  CONSTRAINT PK_EMPLOYEE PRIMARY KEY (EMPLOYEE_ID)
);
CREATE TABLE KITTO_USERS
(
  USER_NAME varchar(32) NOT NULL,
  PASSWORD_HASH varchar(60),
  IS_ACTIVE smallint,
  FIRST_NAME varchar(50),
  LAST_NAME varchar(50),
  EMAIL_ADDRESS varchar(100) NOT NULL,
  MUST_CHANGE_PASSWORD smallint,
  CONSTRAINT PK_KITTO_USERS PRIMARY KEY (USER_NAME)
);
CREATE TABLE OPERATOR_ROLE
(
  ROLE_ID varchar(32) NOT NULL,
  ROLE_NAME varchar(20) NOT NULL,
  FEE float,
  CONSTRAINT PK_OPERATOR_ROLE PRIMARY KEY (ROLE_ID)
);
CREATE TABLE PHASE
(
  PHASE_ID varchar(32) NOT NULL,
  PHASE_NAME varchar(40) NOT NULL,
  PROJECT_ID varchar(32) NOT NULL,
  START_DATE date,
  END_DATE date,
  STATUS varchar(12),
  CONSTRAINT PK_PHASE PRIMARY KEY (PHASE_ID)
);
CREATE TABLE PROJECT
(
  PROJECT_ID varchar(32) NOT NULL,
  PROJECT_NAME varchar(40) NOT NULL,
  CUSTOMER_ID varchar(32) NOT NULL,
  STATUS varchar(12),
  CONSTRAINT PK_PROJECT PRIMARY KEY (PROJECT_ID)
);
/*******************************************************************************
 * Foreign Key Constraints
 * -----------------------
 * Extracted at 22/10/2011 0.54.20
 ******************************************************************************/

ALTER TABLE PROJECT ADD CONSTRAINT DT_PROJECT_CUSTOMER
  FOREIGN KEY (CUSTOMER_ID) REFERENCES CUSTOMER
  (CUSTOMER_ID)
  ON DELETE NO ACTION
  ON UPDATE NO ACTION
;

ALTER TABLE PHASE ADD CONSTRAINT DT_PHASE_PROJECT
  FOREIGN KEY (PROJECT_ID) REFERENCES PROJECT
  (PROJECT_ID) 
  ON DELETE NO ACTION
  ON UPDATE NO ACTION
;

ALTER TABLE ACTIVITY ADD CONSTRAINT DT_ACTIVITY_PHASE
  FOREIGN KEY (PHASE_ID) REFERENCES PHASE
  (PHASE_ID) 
  ON DELETE NO ACTION
  ON UPDATE NO ACTION
;

ALTER TABLE ACTIVITY ADD CONSTRAINT FK_ACTIVITY_ACTIVITY_TYPE 
  FOREIGN KEY (TYPE_ID) REFERENCES ACTIVITY_TYPE
  (TYPE_ID) 
  ON DELETE NO ACTION
  ON UPDATE NO ACTION
;

ALTER TABLE ACTIVITY ADD CONSTRAINT FK_ACTIVITY_OPERATOR_ROLE 
  FOREIGN KEY (ROLE_ID) REFERENCES OPERATOR_ROLE
  (ROLE_ID) 
  ON DELETE NO ACTION
  ON UPDATE NO ACTION
;

ALTER TABLE ACTIVITY ADD CONSTRAINT FK_ACTIVITY_EMPLOYEE 
  FOREIGN KEY (EMPLOYEE_ID) REFERENCES EMPLOYEE
  (EMPLOYEE_ID) 
  ON DELETE NO ACTION
  ON UPDATE NO ACTION
;
/********************* VIEWS **********************/

CREATE VIEW ACTIVITY_BY_DATE (ACTIVITY_DATE, DURATION, ACTIVITIES)
AS  
SELECT
  A.ACTIVITY_DATE, 
  CAST(AVG(DATEDIFF(millisecond, A.START_TIME, A.END_TIME) / CAST(3600000 AS FLOAT)) AS DECIMAL(8,4)) DURATION, 
  COUNT(*) ACTIVITIES
FROM ACTIVITY A
GROUP BY
  ACTIVITY_DATE
;
CREATE VIEW ACTIVITY_BY_TYPE (DURATION, TYPE_NAME)
AS     
SELECT
  CAST(AVG(DATEDIFF(millisecond, A.START_TIME, A.END_TIME) / CAST(3600000 AS FLOAT)) AS DECIMAL(8,4)) DURATION, 
  T.TYPE_NAME
FROM ACTIVITY A
join ACTIVITY_TYPE T on A.TYPE_ID = T.TYPE_ID
GROUP BY 
  T.TYPE_NAME
;
/******************* EXCEPTIONS *******************/

/******************** TRIGGERS ********************/


ALTER TABLE ACTIVITY ADD CONSTRAINT DT_ACTIVITY_PHASE
  FOREIGN KEY (PHASE_ID) REFERENCES PHASE (PHASE_ID) ON UPDATE NO ACTION ON DELETE NO ACTION;
ALTER TABLE ACTIVITY ADD CONSTRAINT FK_ACTIVITY_ACTIVITY_TYPE
  FOREIGN KEY (TYPE_ID) REFERENCES ACTIVITY_TYPE (TYPE_ID) ON UPDATE NO ACTION ON DELETE NO ACTION;
ALTER TABLE ACTIVITY ADD CONSTRAINT FK_ACTIVITY_EMPLOYEE
  FOREIGN KEY (EMPLOYEE_ID) REFERENCES EMPLOYEE (EMPLOYEE_ID) ON UPDATE NO ACTION ON DELETE NO ACTION;
ALTER TABLE ACTIVITY ADD CONSTRAINT FK_ACTIVITY_OPERATOR_ROLE
  FOREIGN KEY (ROLE_ID) REFERENCES OPERATOR_ROLE (ROLE_ID) ON UPDATE NO ACTION ON DELETE NO ACTION;
ALTER TABLE PHASE ADD CONSTRAINT DT_PHASE_PROJECT
  FOREIGN KEY (PROJECT_ID) REFERENCES PROJECT (PROJECT_ID) ON UPDATE NO ACTION ON DELETE NO ACTION;
ALTER TABLE PROJECT ADD CONSTRAINT DT_PROJECT_CUSTOMER
  FOREIGN KEY (CUSTOMER_ID) REFERENCES CUSTOMER (CUSTOMER_ID) ON UPDATE NO ACTION ON DELETE NO ACTION;

/******************** GRANTS ********************/
GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON ACTIVITY TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON ACTIVITY_TYPE TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON CUSTOMER TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON EMPLOYEE TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON KITTO_USERS TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON OPERATOR_ROLE TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON PHASE TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON PROJECT TO  SYSDBA WITH GRANT OPTION;

GRANT REFERENCES, SELECT
 ON ACTIVITY_BY_DATE TO  SYSDBA WITH GRANT OPTION;

GRANT REFERENCES, SELECT
 ON ACTIVITY_BY_TYPE TO  SYSDBA WITH GRANT OPTION;
